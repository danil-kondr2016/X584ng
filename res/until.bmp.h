#ifndef UNTIL_BMP_H
#define UNTIL_BMP_H

#include <wx/mstream.h>
#include <wx/image.h>
#include <wx/bitmap.h>

static const unsigned char until_bmp[] =
{
	0x42, 0x4D, 0x8A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x8A, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
	0x42, 0x47, 0x52, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xCC, 0x86, 0x40, 0xD1, 0x80, 0x2F, 0xD0, 
	0x7D, 0x2B, 0xD0, 0x7D, 0x2B, 0xD0, 0x7D, 0x2B, 0xD0, 0x7D, 
	0x2B, 0xD0, 0x7D, 0x2B, 0xD0, 0x7D, 0x2B, 0xD0, 0x7D, 0x2B, 
	0xD0, 0x7D, 0x2B, 0xC9, 0x7E, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xC9, 0x7E, 0x34, 0xDF, 0xA3, 0x69, 0xE2, 0xAD, 0x79, 
	0xE3, 0xAF, 0x7D, 0xE3, 0xB0, 0x7E, 0xE3, 0xB1, 0x7F, 0xE3, 
	0xB1, 0x7F, 0xE2, 0xB0, 0x7D, 0xE2, 0xAE, 0x7A, 0xDF, 0xA4, 
	0x6A, 0xD0, 0x7D, 0x2B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 
	0x7E, 0x34, 0xE0, 0xA8, 0x70, 0xEB, 0xC7, 0xA3, 0xEB, 0xC7, 
	0xA3, 0xEB, 0xC7, 0xA3, 0xEB, 0xC7, 0xA3, 0xEB, 0xC7, 0xA3, 
	0xEB, 0xC7, 0xA3, 0xEB, 0xC7, 0xA3, 0xE2, 0xAE, 0x7A, 0xD0, 
	0x7D, 0x2B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x6F, 0x9F, 0x0B, 0x6F, 0x9F, 
	0xE0, 0xA8, 0x70, 0xEB, 0xC7, 0xA3, 0xB0, 0x64, 0x1C, 0xB0, 
	0x64, 0x1C, 0xEA, 0xC5, 0xA1, 0xB0, 0x64, 0x1C, 0xB0, 0x64, 
	0x1C, 0xEB, 0xC7, 0xA3, 0xE3, 0xB0, 0x7D, 0xD0, 0x7D, 0x2B, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0x0B, 0x6F, 0x9F, 0x18, 0xAE, 0xDB, 0x0B, 0x6F, 
	0x9F, 0xE4, 0xB3, 0x83, 0xEB, 0xC7, 0xA3, 0xEB, 0xC6, 0xA2, 
	0xB0, 0x64, 0x1C, 0xED, 0xCB, 0xAB, 0xEC, 0xCB, 0xA9, 0xEB, 
	0xC7, 0xA3, 0xE3, 0xB1, 0x7E, 0xD0, 0x7D, 0x2B, 0xFF, 0xFF, 
	0xFF, 0xE8, 0xF6, 0xFA, 0x0B, 0x6F, 0x9F, 0x0B, 0x6F, 0x9F, 
	0x0B, 0x6F, 0x9F, 0x31, 0xB5, 0xDE, 0x31, 0xB5, 0xDE, 0x0B, 
	0x6F, 0x9F, 0xE4, 0xB3, 0x83, 0xEB, 0xC7, 0xA3, 0xB0, 0x64, 
	0x1C, 0xED, 0xCD, 0xAC, 0xED, 0xCC, 0xAA, 0xEC, 0xC8, 0xA5, 
	0xE3, 0xB1, 0x80, 0xCE, 0x7E, 0x2E, 0xBC, 0xE4, 0xF1, 0x50, 
	0x82, 0xA4, 0x81, 0xD7, 0xEB, 0x81, 0xD7, 0xEB, 0x81, 0xD7, 
	0xEB, 0x60, 0xC8, 0xE3, 0x60, 0xC8, 0xE3, 0x60, 0xC8, 0xE3, 
	0x0B, 0x6F, 0x9F, 0xE6, 0xB9, 0x8C, 0xB0, 0x64, 0x1C, 0xED, 
	0xCD, 0xAC, 0xED, 0xCC, 0xAC, 0xEB, 0xC8, 0xA5, 0xE4, 0xB2, 
	0x80, 0xCF, 0x7D, 0x2D, 0x69, 0x9A, 0xB8, 0x86, 0xD0, 0xE6, 
	0x9C, 0xD7, 0xEA, 0x0B, 0x6F, 0x9F, 0x0B, 0x6F, 0x9F, 0xB7, 
	0xE7, 0xF7, 0xB7, 0xE7, 0xF7, 0x0B, 0x6F, 0x9F, 0xE9, 0xC3, 
	0x9C, 0xEC, 0xC8, 0xA5, 0xB0, 0x64, 0x1C, 0xED, 0xCD, 0xAD, 
	0xED, 0xCC, 0xAB, 0xEC, 0xC8, 0xA5, 0xE3, 0xB1, 0x80, 0xD0, 
	0x7D, 0x2B, 0x54, 0xA0, 0xC0, 0xB0, 0xDF, 0xEF, 0x1D, 0xA5, 
	0xD1, 0xFF, 0xFF, 0xFF, 0x1D, 0xA5, 0xD1, 0xC8, 0xED, 0xFA, 
	0x0B, 0x6F, 0x9F, 0xE8, 0xBE, 0x95, 0xE9, 0xC3, 0x9C, 0xEC, 
	0xC8, 0xA5, 0xB0, 0x64, 0x1C, 0xED, 0xCD, 0xAD, 0xED, 0xCC, 
	0xAC, 0xEC, 0xC8, 0xA5, 0xE4, 0xB2, 0x80, 0xD0, 0x7D, 0x2B, 
	0x39, 0x99, 0xBE, 0xC2, 0xE6, 0xF2, 0x1D, 0xA5, 0xD1, 0xFF, 
	0xFF, 0xFF, 0x1D, 0xA5, 0xD1, 0x0B, 0x6F, 0x9F, 0xE8, 0xBE, 
	0x95, 0xEA, 0xC6, 0xA2, 0xEA, 0xC6, 0xA2, 0xEC, 0xCB, 0xA8, 
	0xB0, 0x64, 0x1C, 0xED, 0xCD, 0xAD, 0xED, 0xCB, 0xAA, 0xEB, 
	0xC7, 0xA3, 0xE3, 0xB1, 0x80, 0xD0, 0x7D, 0x2B, 0x1D, 0xA5, 
	0xD1, 0xDA, 0xF0, 0xF7, 0x1D, 0xA5, 0xD1, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xE4, 0xC1, 0x9E, 0xF7, 0xDF, 0xC9, 0xF7, 
	0xDD, 0xC3, 0xF7, 0xDC, 0xC1, 0xF7, 0xDC, 0xC1, 0xB0, 0x64, 
	0x1C, 0xED, 0xCB, 0xA9, 0xEC, 0xC9, 0xA6, 0xEA, 0xC5, 0xA0, 
	0xE3, 0xB0, 0x7D, 0xD0, 0x7D, 0x2B, 0x1D, 0xA5, 0xD1, 0xFF, 
	0xFF, 0xFF, 0x1D, 0xA5, 0xD1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xE4, 0xC1, 0x9E, 0xF7, 0xEC, 0xE1, 0xF8, 0xE6, 0xD4, 
	0xB0, 0x64, 0x1C, 0xB0, 0x64, 0x1C, 0xF7, 0xDC, 0xC1, 0xB0, 
	0x64, 0x1C, 0xB0, 0x64, 0x1C, 0xEA, 0xC5, 0xA0, 0xE1, 0xAB, 
	0x75, 0xD0, 0x7D, 0x2B, 0x1D, 0xA5, 0xD1, 0x1D, 0xA5, 0xD1, 
	0x1D, 0xA5, 0xD1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 
	0xCA, 0xAD, 0xFB, 0xF4, 0xEA, 0xF8, 0xEF, 0xE5, 0xF8, 0xEC, 
	0xDF, 0xF8, 0xEC, 0xDF, 0xF4, 0xE1, 0xCE, 0xF2, 0xDB, 0xC4, 
	0xF0, 0xD5, 0xBA, 0xED, 0xCE, 0xAE, 0xE1, 0xAA, 0x76, 0xC9, 
	0x7E, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC9, 0xAC, 
	0xFF, 0xFA, 0xF5, 0xFF, 0xFA, 0xF5, 0xFA, 0xF0, 0xE6, 0xF9, 
	0xED, 0xE1, 0xF9, 0xED, 0xE1, 0xF2, 0xDB, 0xC4, 0xF0, 0xD5, 
	0xBA, 0xED, 0xCE, 0xAE, 0xE5, 0xB4, 0x84, 0xC9, 0x7E, 0x33, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC9, 0xAC, 0xE7, 0xC9, 
	0xAC, 0xE4, 0xC1, 0xA1, 0xE1, 0xBD, 0x99, 0xDF, 0xB7, 0x8F, 
	0xDA, 0xAD, 0x7F, 0xDA, 0xA7, 0x75, 0xD8, 0xA3, 0x6E, 0xD5, 
	0x9D, 0x66, 0xCF, 0x8E, 0x4D, 0xC9, 0x7E, 0x33, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
};

wxBitmap& until_bmp_to_wx_bitmap()
{
	static wxMemoryInputStream memIStream( until_bmp, sizeof( until_bmp ) );
	static wxImage image( memIStream, wxBITMAP_TYPE_BMP );
	static wxBitmap bmp( image );
	return bmp;
}


#endif //UNTIL_BMP_H
