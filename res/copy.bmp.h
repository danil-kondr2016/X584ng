#ifndef COPY_BMP_H
#define COPY_BMP_H

#include <wx/mstream.h>
#include <wx/image.h>
#include <wx/bitmap.h>

static const unsigned char copy_bmp[] =
{
	0x42, 0x4D, 0x8A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x8A, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
	0x42, 0x47, 0x52, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x7E, 
	0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 
	0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 
	0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 
	0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x61, 0x7E, 0xA8, 0x78, 
	0xAB, 0xE5, 0x6D, 0xA5, 0xE4, 0x64, 0x9F, 0xE2, 0x5B, 0x9A, 
	0xE1, 0x52, 0x95, 0xDF, 0x4B, 0x90, 0xDE, 0x45, 0x8C, 0xDC, 
	0x40, 0x89, 0xDB, 0x40, 0x89, 0xDB, 0x61, 0x7E, 0xA8, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x61, 0x7E, 0xA8, 0x8B, 0xB8, 0xE9, 
	0x80, 0xB1, 0xE7, 0x76, 0xAA, 0xE5, 0x6C, 0xA4, 0xE3, 0x62, 
	0x9E, 0xE1, 0x59, 0x98, 0xDF, 0x51, 0x93, 0xDE, 0x4A, 0x8F, 
	0xDD, 0x44, 0x8B, 0xDC, 0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0x61, 0x7E, 0xA8, 0xA0, 0xC4, 0xED, 0x61, 0x7E, 
	0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 
	0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x58, 0x97, 0xE0, 0x4F, 
	0x92, 0xDE, 0x61, 0x7E, 0xA8, 0x50, 0x82, 0xA4, 0x50, 0x82, 
	0xA4, 0x50, 0x82, 0xA4, 0x50, 0x82, 0xA4, 0x50, 0x82, 0xA4, 
	0x65, 0x82, 0xAC, 0xB4, 0xD0, 0xF1, 0xA8, 0xC9, 0xEF, 0x9D, 
	0xC3, 0xED, 0x92, 0xBC, 0xEB, 0x87, 0xB5, 0xE8, 0x7C, 0xAE, 
	0xE6, 0x71, 0xA8, 0xE5, 0x67, 0xA1, 0xE3, 0x5F, 0x9C, 0xE1, 
	0x61, 0x7E, 0xA8, 0x15, 0xA1, 0xD0, 0x12, 0xA0, 0xCF, 0x12, 
	0xA0, 0xCF, 0x12, 0xA0, 0xCF, 0x50, 0x82, 0xA4, 0x6C, 0x89, 
	0xB3, 0xC7, 0xDD, 0xF4, 0xBC, 0xD6, 0xF2, 0xB1, 0xCF, 0xF1, 
	0xA6, 0xC8, 0xEF, 0x9B, 0xC1, 0xEC, 0x8F, 0xBA, 0xEA, 0x84, 
	0xB3, 0xE8, 0x7A, 0xAD, 0xE6, 0x6F, 0xA7, 0xE4, 0x61, 0x7E, 
	0xA8, 0x23, 0xA7, 0xD3, 0x1A, 0xA3, 0xD1, 0x12, 0xA0, 0xCF, 
	0x12, 0xA0, 0xCF, 0x50, 0x82, 0xA4, 0x74, 0x92, 0xBA, 0xD9, 
	0xE7, 0xF7, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 
	0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 
	0x8D, 0xB9, 0xE9, 0x83, 0xB2, 0xE7, 0x61, 0x7E, 0xA8, 0x50, 
	0x82, 0xA4, 0x50, 0x82, 0xA4, 0x1F, 0xA5, 0xD2, 0x17, 0xA2, 
	0xD0, 0x50, 0x82, 0xA4, 0x7C, 0x9A, 0xC3, 0xE9, 0xF1, 0xFA, 
	0xE0, 0xEC, 0xF9, 0xD7, 0xE6, 0xF8, 0xCD, 0xE0, 0xF6, 0xC3, 
	0xDA, 0xF4, 0xB8, 0xD3, 0xF2, 0xAD, 0xCD, 0xF0, 0xA2, 0xC5, 
	0xED, 0x96, 0xBE, 0xEB, 0x61, 0x7E, 0xA8, 0x4D, 0xB8, 0xDB, 
	0x3F, 0xB2, 0xD8, 0x31, 0xAD, 0xD5, 0x25, 0xA8, 0xD3, 0x50, 
	0x82, 0xA4, 0x84, 0xA2, 0xCC, 0xF6, 0xFA, 0xFE, 0xEF, 0xF5, 
	0xFD, 0xE8, 0xF1, 0xFA, 0xDF, 0xEB, 0xF9, 0xD5, 0xE5, 0xF7, 
	0x62, 0x7F, 0xA9, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 
	0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x66, 0xC1, 0xE0, 0x56, 0xBC, 
	0xDD, 0x47, 0xB5, 0xDA, 0x3A, 0xB0, 0xD7, 0x50, 0x82, 0xA4, 
	0x8D, 0xAA, 0xD3, 0xFF, 0xFF, 0xFF, 0x61, 0x7E, 0xA8, 0x61, 
	0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0xE6, 0xF0, 0xFA, 0x67, 0x84, 
	0xAE, 0xD4, 0xE4, 0xF7, 0xC9, 0xDE, 0xF5, 0x61, 0x7E, 0xA8, 
	0x50, 0x82, 0xA4, 0x50, 0x82, 0xA4, 0x50, 0x82, 0xA4, 0x60, 
	0xBF, 0xDF, 0x50, 0xB9, 0xDB, 0x50, 0x82, 0xA4, 0x94, 0xB1, 
	0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFA, 0xFC, 0xFE, 0xF4, 0xF8, 0xFD, 0x6D, 0x8B, 0xB4, 0xE4, 
	0xEF, 0xFA, 0x64, 0x80, 0xAB, 0xBB, 0xE4, 0xF1, 0xAB, 0xDE, 
	0xEE, 0x9B, 0xD6, 0xEB, 0x8A, 0xD1, 0xE7, 0x7A, 0xC9, 0xE4, 
	0x69, 0xC3, 0xE0, 0x50, 0x82, 0xA4, 0x99, 0xB6, 0xDF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFE, 0xFF, 0xFF, 0x75, 0x93, 0xBC, 0x6F, 0x8C, 0xB6, 
	0xE0, 0xF2, 0xF8, 0xD2, 0xED, 0xF6, 0xC4, 0xE7, 0xF3, 0x3E, 
	0x91, 0xB3, 0x44, 0x8D, 0xAE, 0x48, 0x89, 0xAA, 0x4C, 0x86, 
	0xA7, 0x4F, 0x82, 0xA4, 0x99, 0xB7, 0xE0, 0x99, 0xB7, 0xE0, 
	0x95, 0xB4, 0xDD, 0x90, 0xAE, 0xD8, 0x8B, 0xA9, 0xD2, 0x84, 
	0xA2, 0xCC, 0x7E, 0x9B, 0xC5, 0x50, 0x82, 0xA4, 0x50, 0x82, 
	0xA4, 0x50, 0x82, 0xA4, 0xDB, 0xF0, 0xF8, 0x36, 0x9A, 0xBA, 
	0xBE, 0xE5, 0xF1, 0xAE, 0xDF, 0xEF, 0x46, 0x8B, 0xAC, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0xBF, 0xDD, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 
	0xFB, 0xFD, 0xEE, 0xF8, 0xFC, 0x2D, 0xA1, 0xC1, 0xD5, 0xEE, 
	0xF6, 0x39, 0x96, 0xB7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xC3, 0xE1, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFC, 0xFE, 0xFE, 0x24, 0xA8, 0xC8, 0x2A, 0xA3, 0xC3, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0x05, 0xC4, 0xE2, 0x05, 0xC4, 0xE2, 0x08, 
	0xC1, 0xE0, 0x0C, 0xBE, 0xDC, 0x10, 0xBA, 0xD8, 0x16, 0xB6, 
	0xD4, 0x1B, 0xB0, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
};

wxBitmap& copy_bmp_to_wx_bitmap()
{
	static wxMemoryInputStream memIStream( copy_bmp, sizeof( copy_bmp ) );
	static wxImage image( memIStream, wxBITMAP_TYPE_BMP );
	static wxBitmap bmp( image );
	return bmp;
}


#endif //COPY_BMP_H
