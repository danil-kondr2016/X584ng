#ifndef STOP_BMP_H
#define STOP_BMP_H

#include <wx/mstream.h>
#include <wx/image.h>
#include <wx/bitmap.h>

static const unsigned char stop_bmp[] =
{
	0x42, 0x4D, 0x8A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x8A, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
	0x42, 0x47, 0x52, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x61, 
	0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 
	0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 
	0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 
	0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 
	0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x61, 0x7E, 0xA8, 
	0x56, 0x97, 0xDF, 0x5E, 0x9C, 0xE0, 0x6D, 0xA5, 0xE3, 0x6E, 
	0xA5, 0xE3, 0x6E, 0xA6, 0xE3, 0x6E, 0xA6, 0xE3, 0x6E, 0xA6, 
	0xE3, 0x6E, 0xA5, 0xE3, 0x6D, 0xA5, 0xE3, 0x6D, 0xA4, 0xE3, 
	0x5E, 0x9C, 0xE0, 0x56, 0x97, 0xDF, 0x61, 0x7E, 0xA8, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x61, 0x7E, 0xA8, 0x5E, 0x9C, 
	0xE0, 0x69, 0xA3, 0xE2, 0x80, 0xB1, 0xE7, 0x81, 0xB1, 0xE7, 
	0x81, 0xB1, 0xE7, 0x7E, 0xAF, 0xE7, 0x79, 0xAC, 0xE5, 0x81, 
	0xB1, 0xE7, 0x80, 0xB1, 0xE7, 0x7F, 0xB0, 0xE6, 0x69, 0xA3, 
	0xE2, 0x5E, 0x9C, 0xE0, 0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0x61, 0x7E, 0xA8, 0x6D, 0xA5, 0xE3, 0x80, 
	0xB1, 0xE7, 0xA8, 0xC9, 0xEE, 0xA8, 0xC9, 0xEE, 0xA8, 0xC9, 
	0xEE, 0x9B, 0xC1, 0xEB, 0x9F, 0xC4, 0xEC, 0xA8, 0xC9, 0xEE, 
	0xA8, 0xC9, 0xEE, 0xA8, 0xC9, 0xEE, 0x80, 0xB1, 0xE7, 0x6D, 
	0xA5, 0xE3, 0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0x61, 0x7E, 0xA8, 0x71, 0xA6, 0xE4, 0x80, 0xB1, 0xE7, 
	0xA8, 0xC9, 0xEE, 0x43, 0x6D, 0xA8, 0x43, 0x6D, 0xA8, 0xA9, 
	0xCA, 0xEE, 0xA9, 0xCA, 0xEE, 0x43, 0x6D, 0xA8, 0x43, 0x6D, 
	0xA8, 0xA5, 0xC7, 0xED, 0x81, 0xB1, 0xE7, 0x6E, 0xA5, 0xE3, 
	0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6B, 
	0x86, 0xB1, 0x79, 0xAC, 0xE5, 0x8D, 0xBA, 0xEA, 0x9E, 0xC4, 
	0xEC, 0xA9, 0xCA, 0xEE, 0x43, 0x6D, 0xA8, 0x43, 0x6D, 0xA8, 
	0x43, 0x6D, 0xA8, 0x43, 0x6D, 0xA8, 0xA7, 0xC8, 0xED, 0x92, 
	0xBC, 0xEB, 0x7F, 0xAF, 0xE7, 0x6E, 0xA6, 0xE3, 0x61, 0x7E, 
	0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x72, 0x8F, 0xB8, 
	0x8A, 0xB7, 0xE9, 0x97, 0xBF, 0xEB, 0xA9, 0xCA, 0xEE, 0xA9, 
	0xCA, 0xEE, 0xA9, 0xCA, 0xEE, 0x43, 0x6D, 0xA8, 0x43, 0x6D, 
	0xA8, 0xA9, 0xCA, 0xEE, 0xA7, 0xC9, 0xEE, 0x94, 0xBE, 0xEC, 
	0x73, 0xA8, 0xE4, 0x6E, 0xA6, 0xE3, 0x61, 0x7E, 0xA8, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x77, 0x93, 0xBD, 0x9D, 0xC4, 
	0xEC, 0xA8, 0xC9, 0xEF, 0xB3, 0xD0, 0xF0, 0xAF, 0xCE, 0xEF, 
	0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0x61, 
	0x7E, 0xA8, 0xA8, 0xC9, 0xEE, 0x9C, 0xC2, 0xEC, 0x7D, 0xAF, 
	0xE7, 0x6E, 0xA6, 0xE3, 0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0x7D, 0x9A, 0xC4, 0xC7, 0xDC, 0xF6, 0xC9, 
	0xDE, 0xF4, 0xBC, 0xD5, 0xF2, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 
	0xA8, 0xAE, 0xCD, 0xEF, 0xA9, 0xCA, 0xEE, 0x61, 0x7E, 0xA8, 
	0x61, 0x7E, 0xA8, 0xA5, 0xC7, 0xED, 0x81, 0xB1, 0xE7, 0x6E, 
	0xA5, 0xE3, 0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0x87, 0xA2, 0xCD, 0xE4, 0xED, 0xFB, 0xE9, 0xF1, 0xFB, 
	0xBB, 0xD5, 0xF2, 0xBB, 0xD5, 0xF2, 0xBB, 0xD5, 0xF2, 0xB5, 
	0xD1, 0xF1, 0xAC, 0xCC, 0xEF, 0xA9, 0xC9, 0xEE, 0xA9, 0xC9, 
	0xEE, 0xA9, 0xC9, 0xEE, 0x80, 0xB1, 0xE7, 0x6D, 0xA5, 0xE3, 
	0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 
	0xB7, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0xF4, 
	0xFC, 0xE6, 0xEF, 0xFA, 0xDD, 0xEA, 0xF9, 0xD5, 0xE5, 0xF7, 
	0xC1, 0xD9, 0xF3, 0xB7, 0xD3, 0xF1, 0xAD, 0xCD, 0xF0, 0xA3, 
	0xC6, 0xED, 0x77, 0xAC, 0xE5, 0x66, 0xA1, 0xE1, 0x61, 0x7E, 
	0xA8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0xB7, 0xE0, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFB, 0xFE, 0xF1, 
	0xF7, 0xFC, 0xE9, 0xF2, 0xFB, 0xE0, 0xEC, 0xF9, 0xCB, 0xDF, 
	0xF5, 0xC0, 0xD8, 0xF3, 0xB5, 0xD1, 0xF1, 0xA9, 0xC9, 0xEF, 
	0x7E, 0xAF, 0xE6, 0x6D, 0xA5, 0xE3, 0x61, 0x7E, 0xA8, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0xB7, 0xE0, 0x99, 0xB7, 
	0xE0, 0x99, 0xB7, 0xE0, 0x8A, 0xA8, 0xD1, 0x86, 0xA2, 0xCB, 
	0x7F, 0x9E, 0xC6, 0x7B, 0x98, 0xC1, 0x6E, 0x8B, 0xB5, 0x6B, 
	0x87, 0xB0, 0x68, 0x84, 0xAD, 0x66, 0x82, 0xAC, 0x61, 0x7E, 
	0xA8, 0x61, 0x7E, 0xA8, 0x61, 0x7E, 0xA8, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
};

wxBitmap& stop_bmp_to_wx_bitmap()
{
	static wxMemoryInputStream memIStream( stop_bmp, sizeof( stop_bmp ) );
	static wxImage image( memIStream, wxBITMAP_TYPE_BMP );
	static wxBitmap bmp( image );
	return bmp;
}


#endif //STOP_BMP_H
