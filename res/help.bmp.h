#ifndef HELP_BMP_H
#define HELP_BMP_H

#include <wx/mstream.h>
#include <wx/image.h>
#include <wx/bitmap.h>

static const unsigned char help_bmp[] =
{
	0x42, 0x4D, 0x8A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x8A, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 
	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
	0x42, 0x47, 0x52, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xD4, 0xD8, 0xD3, 0xCE, 0xB4, 0x9A, 0xD1, 0xAC, 0x8A, 0xD4, 
	0xAF, 0x91, 0xD4, 0xB1, 0x92, 0xCF, 0xAA, 0x8A, 0xC9, 0xA9, 
	0x8A, 0xCE, 0xC6, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD1, 0xC0, 0xAB, 0xDA, 0xBC, 
	0xA0, 0xEA, 0xE2, 0xDB, 0xE4, 0xDA, 0xD3, 0xD7, 0xC4, 0xB8, 
	0xD6, 0xC2, 0xB6, 0xDC, 0xCD, 0xC3, 0xE9, 0xE4, 0xE0, 0xDC, 
	0xC6, 0xB3, 0xC8, 0xA9, 0x8B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xD1, 0xBC, 0xA4, 0xE6, 0xD2, 0xC1, 0xE6, 0xDD, 0xD7, 0xBB, 
	0x8C, 0x6C, 0xAB, 0x66, 0x33, 0xAA, 0x5F, 0x25, 0xA7, 0x5B, 
	0x20, 0xA4, 0x5A, 0x22, 0xAD, 0x71, 0x47, 0xD5, 0xBF, 0xB1, 
	0xE6, 0xE0, 0xD8, 0xC8, 0xA3, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD4, 0xCB, 0xBA, 0xE5, 0xCE, 
	0xB8, 0xE0, 0xD0, 0xC7, 0xB1, 0x74, 0x47, 0xB1, 0x63, 0x23, 
	0xB5, 0x65, 0x24, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAC, 
	0x58, 0x16, 0xA5, 0x4F, 0x0C, 0xA4, 0x58, 0x20, 0xC7, 0xA6, 
	0x90, 0xE7, 0xE0, 0xDA, 0xC7, 0xA7, 0x89, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xDA, 0xBA, 0x9B, 0xED, 0xE7, 0xE2, 0xB6, 
	0x7D, 0x54, 0xB7, 0x6C, 0x2C, 0xBD, 0x6F, 0x2C, 0xC2, 0x71, 
	0x2E, 0xE8, 0xC9, 0xAF, 0xE6, 0xC7, 0xAD, 0xB8, 0x62, 0x1D, 
	0xB1, 0x59, 0x13, 0xA7, 0x50, 0x0C, 0xA4, 0x59, 0x22, 0xD5, 
	0xBF, 0xB2, 0xD8, 0xC3, 0xB0, 0xCF, 0xCB, 0xC0, 0xD5, 0xD2, 
	0xC5, 0xE9, 0xD5, 0xC3, 0xCE, 0xAF, 0x9B, 0xB9, 0x73, 0x38, 
	0xC3, 0x79, 0x39, 0xC8, 0x7B, 0x39, 0xCA, 0x7B, 0x39, 0xE0, 
	0xB8, 0x98, 0xDD, 0xB5, 0x94, 0xBE, 0x69, 0x24, 0xBC, 0x64, 
	0x1E, 0xB1, 0x59, 0x14, 0xA5, 0x4F, 0x0D, 0xAD, 0x71, 0x47, 
	0xE9, 0xE5, 0xE3, 0xC8, 0xAD, 0x91, 0xD6, 0xC3, 0xAB, 0xF1, 
	0xE9, 0xE2, 0xBC, 0x88, 0x63, 0xC4, 0x7F, 0x42, 0xCC, 0x84, 
	0x45, 0xD0, 0x84, 0x43, 0xD0, 0x84, 0x43, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xC0, 0x71, 0x30, 0xC1, 0x6B, 0x25, 0xB9, 
	0x62, 0x1C, 0xAC, 0x56, 0x12, 0xA4, 0x59, 0x22, 0xE0, 0xD3, 
	0xCB, 0xCB, 0xA9, 0x8B, 0xD7, 0xBF, 0xA3, 0xF5, 0xF3, 0xF1, 
	0xB7, 0x7A, 0x4D, 0xCB, 0x88, 0x4D, 0xD1, 0x8C, 0x4E, 0xD4, 
	0x89, 0x4A, 0xD3, 0x88, 0x46, 0xF4, 0xE3, 0xD4, 0xFE, 0xFD, 
	0xFD, 0xF1, 0xE1, 0xD4, 0xD0, 0x99, 0x6A, 0xBA, 0x65, 0x20, 
	0xB1, 0x5C, 0x17, 0xA3, 0x53, 0x15, 0xD5, 0xBF, 0xB2, 0xCE, 
	0xAB, 0x8C, 0xD8, 0xC0, 0xA7, 0xF6, 0xF4, 0xF1, 0xB9, 0x7E, 
	0x51, 0xCF, 0x8F, 0x56, 0xD5, 0x91, 0x56, 0xD6, 0x8F, 0x50, 
	0xD5, 0x8A, 0x49, 0xD3, 0x86, 0x44, 0xDD, 0xA2, 0x70, 0xFB, 
	0xF6, 0xF1, 0xFE, 0xFE, 0xFE, 0xD1, 0x9F, 0x75, 0xB2, 0x5E, 
	0x1A, 0xA5, 0x56, 0x18, 0xD6, 0xC0, 0xB3, 0xCF, 0xAC, 0x8D, 
	0xD8, 0xC7, 0xB1, 0xF3, 0xEC, 0xE4, 0xC0, 0x8E, 0x6A, 0xD0, 
	0x92, 0x5B, 0xD6, 0x96, 0x5C, 0xD6, 0x91, 0x55, 0xD2, 0x89, 
	0x49, 0xD4, 0x89, 0x48, 0xD3, 0x87, 0x45, 0xEC, 0xCD, 0xB3, 
	0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xD3, 0xAF, 0x5D, 0x1A, 0xA7, 
	0x5F, 0x27, 0xE1, 0xD5, 0xCD, 0xCC, 0xAC, 0x8E, 0xD7, 0xD5, 
	0xCC, 0xED, 0xD9, 0xC7, 0xD3, 0xB5, 0xA1, 0xC8, 0x8C, 0x57, 
	0xD5, 0x98, 0x5F, 0xDE, 0xAB, 0x7D, 0xE1, 0xBD, 0x9D, 0xCC, 
	0x89, 0x4E, 0xCE, 0x8B, 0x50, 0xF3, 0xE4, 0xD6, 0xFF, 0xFF, 
	0xFF, 0xF2, 0xE5, 0xDA, 0xAD, 0x5D, 0x1B, 0xB0, 0x75, 0x4C, 
	0xEB, 0xE8, 0xE5, 0xCB, 0xB1, 0x96, 0xFF, 0xFF, 0xFF, 0xDE, 
	0xC2, 0xA7, 0xF2, 0xED, 0xE9, 0xBF, 0x8B, 0x66, 0xCE, 0x92, 
	0x5B, 0xDE, 0xAF, 0x84, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF9, 0xF7, 0xCF, 
	0xA1, 0x79, 0xAA, 0x64, 0x2D, 0xDB, 0xC7, 0xBB, 0xDA, 0xC6, 
	0xB3, 0xD1, 0xD0, 0xC5, 0xFF, 0xFF, 0xFF, 0xD7, 0xD2, 0xC5, 
	0xEB, 0xD5, 0xC0, 0xE7, 0xD9, 0xD0, 0xBD, 0x86, 0x5C, 0xCC, 
	0x92, 0x5D, 0xDB, 0xAF, 0x87, 0xE5, 0xC7, 0xAB, 0xE8, 0xCF, 
	0xB8, 0xE0, 0xBE, 0xA1, 0xC7, 0x8F, 0x5F, 0xAD, 0x68, 0x31, 
	0xCD, 0xAE, 0x98, 0xE8, 0xE4, 0xDE, 0xCD, 0xB0, 0x94, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD8, 0xC8, 
	0xB5, 0xEC, 0xDA, 0xC9, 0xEF, 0xE7, 0xE1, 0xC4, 0x98, 0x7B, 
	0xBA, 0x7F, 0x50, 0xBC, 0x7B, 0x45, 0xB9, 0x75, 0x3D, 0xB4, 
	0x72, 0x3E, 0xB5, 0x7D, 0x55, 0xDC, 0xC9, 0xBC, 0xEA, 0xE6, 
	0xDE, 0xCD, 0xAF, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 
	0xCC, 0xBB, 0xE3, 0xC9, 0xB0, 0xF4, 0xEE, 0xE6, 0xEE, 0xE5, 
	0xDF, 0xE1, 0xCE, 0xC3, 0xDF, 0xCC, 0xC0, 0xE5, 0xD7, 0xCE, 
	0xF0, 0xED, 0xEA, 0xE0, 0xCD, 0xBA, 0xD0, 0xB7, 0x9D, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xD7, 0xC7, 0xB2, 0xDA, 0xBF, 0xA2, 0xDE, 
	0xC1, 0xA5, 0xDE, 0xC1, 0xA5, 0xD9, 0xBC, 0x9F, 0xD3, 0xBB, 
	0xA1, 0xD4, 0xD1, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
};

wxBitmap& help_bmp_to_wx_bitmap()
{
	static wxMemoryInputStream memIStream( help_bmp, sizeof( help_bmp ) );
	static wxImage image( memIStream, wxBITMAP_TYPE_BMP );
	static wxBitmap bmp( image );
	return bmp;
}


#endif //HELP_BMP_H
